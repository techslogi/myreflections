How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    FC showed me exactly which lines where modified, and which one had the typo.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Easily revert files to their original state. Be it because of a bug that was
	introduced on a newer version, design changes, etc.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually committing enables me to control better my workflow, it also avoids
	a code being sent with errors, like half a line. Smaller changes also wont
	be sent, as opposed to having hourly saves which will clutter the environment.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It depends on what you're doing with your files. Since documents don't have
	to be compiled, there's no margin for errors if the file is saved mid-sentence.
	With code however, if your file saves mid-line, it won't even work. It also
	allows for bigger, logical changes to be saved.

How can you use the commands git log and git diff to view the history of files?

    git log --stat shows every difference in every file, while git diff show the differences
	between two commit IDs.

How might using version control make you more confident to make changes that
could break something?

    With the ease of use and rollbacks, in case something breaks, I can just
	put the previous version back in.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use it on every project from now on. Mainly some small systems from
	my workplace I developed.
